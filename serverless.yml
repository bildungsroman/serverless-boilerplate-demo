service: boilerplateDemo
provider:
  name: aws
  runtime: nodejs8.10
  environment: '${file(./env.yml):${opt:stage, self:provider.stage}}'
  timeout: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:PutItem
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource:
        - Fn::GetAtt:
            - DynamoDbTable
            - Arn
        - Fn::Sub: '#{DynamoDbTable.Arn}/index/*'
functions:
  hello:
    handler: src/handlers/hello.default
    events:
      - http:
          path: hello/{path+}
          method: get
          cors: true
    environment:
      TABLE_NAME:
        Ref: DynamoDbTable
      TABLE_ARN:
        Fn::GetAtt:
          - DynamoDbTable
          - Arn
resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
      Metadata:
        StackeryName: DynamoDbTable
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
custom:
  serverless-offline:
    port: 3001
  dynamodb:
    start:
      migrate: true
      port: 8000
  webpack:
    includeModules: true